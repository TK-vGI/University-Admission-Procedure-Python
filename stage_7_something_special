DEPT_SCORE_INDICES = {
    "Biotech": [1, 0],  # Chemistry, Physics
    "Chemistry": [1],  # Chemistry
    "Engineering": [3, 2],  # Computer Science, Math
    "Mathematics": [2],  # Math
    "Physics": [0, 2]  # Physics, Math
}


def print_output(departments: dict, to_file=True) -> None:
    if not to_file:
        for dept in sorted(departments.keys()):
            print(dept)
            for applicant in departments[dept]:
                score = compute_best_score(applicant, dept)
                print(f"{applicant[0]} {score:.1f}")
            print()
    else:
        for dept in departments:
            with open(f"{dept.lower()}.txt", "w", encoding="utf-8") as f:
                for applicant in departments[dept]:
                    score = compute_best_score(applicant, dept)
                    f.write(f"{applicant[0]} {score:.1f}\n")


def process_file(filename: str) -> list:
    """
    Process "applicant_list.txt" file,
    example: "John Ritchie 89 45 83 75 Physics Engineering Mathematics"
    parsing: [0,1] name,
             [2,3,4,5,6] physics_score, chemistry_score, math_score, computer_science_score, special_exam
             [7,8,9] priority_a, priority_b, priority_c
    """
    # Read the applicants.txt file, example: "Willie McBride 76 45 79 80 100 Physics Engineering Mathematics"
    with open(filename, "r", encoding="utf-8") as fd:
        return [
            [" ".join(parts[:2])] + list(map(float, parts[2:7])) + parts[7:]
            for line in fd if (parts := line.strip().split())
        ]


def sort_applicants_by_best_score(applicants: list, dept: str) -> list:
    return sorted(applicants, key=lambda x: (-compute_best_score(x, dept), x[0]))


def compute_best_score(applicant: list, dept: str) -> float:
    final_indices = DEPT_SCORE_INDICES[dept]
    final_scores = [applicant[i + 1] for i in final_indices]  # shift +1 for name at index 0
    final_avg = sum(final_scores) / len(final_scores)
    special_score = applicant[5]  # special exam score
    return max(final_avg, special_score)


def sort_by_department(applicants: list, departments: dict, n: int) -> dict | None:
    """
    applicants parsing: [name,
                        physics_score, chemistry_score, math_score, computer_science_score, special_exam
                        priority_a, priority_b, priority_c]
    """
    admitted = set()
    priorities = [6, 7, 8]  # priorities now shifted with special exam added

    for priority in priorities:
        for dept in departments:
            eligible = [
                applicant for applicant in applicants
                if applicant[priority] == dept and tuple(applicant) not in admitted
            ]

            selected = sort_applicants_by_best_score(eligible, dept)[:n - len(departments[dept])]
            departments[dept].extend(selected)
            admitted.update(map(tuple, selected))

    # Final sort
    for dept in departments:
        departments[dept] = sort_applicants_by_best_score(departments[dept], dept)

    return departments

def main():
    departments = {dept: [] for dept in DEPT_SCORE_INDICES.keys()}

    # Process "applicant_list.txt" file,
    # applicants = process_file(filename="applicants2_list_7_examples.txt")
    applicants = process_file(filename="applicant_list_7.txt")

    # N integer representing the number of applicants allowed for department
    n = int(input())

    # Sort list of applicant by Departments
    sorted_depts = sort_by_department(applicants, departments, n)

    # Output result according to score
    # print_output(sorted_depts, to_file=False)  # print output to screen
    print_output(sorted_depts, to_file=True)  # print output to files "%department_name%.txt"


if __name__ == '__main__':
    main()