DEPT_SCORE_INDEX = {
    "Biotech": 2,
    "Chemistry": 2,
    "Engineering": 4,
    "Mathematics": 3,
    "Physics": 1
}


def print_output(departments: dict, to_file=False, filename="admitted.txt") -> None:
    target = open(filename, "w", encoding="utf-8") if to_file else None

    for dept in sorted(departments.keys()):
        score_index = DEPT_SCORE_INDEX.get(dept)
        line = dept
        print(line)
        if target: target.write(line + "\n")

        for applicant in departments[dept]:
            line = f"{applicant[0]} {applicant[score_index]:.2f}"
            print(line)
            if target: target.write(line + "\n")

        print()
        if target: target.write("\n")

    if target: target.close()


def process_file(filename: str) -> list:
    """
    Process "applicant_list.txt" file,
    example: "John Ritchie 89 45 83 75 Physics Engineering Mathematics"
    parsing: [0,1] name,
             [2,3,4,5] physics_score, chemistry_score, math_score, computer_science_score,
             [6,7,8] priority_a, priority_b, priority_c
    """
    # Read the applicants.txt file, example: "John Ritchie 89 45 83 75 Physics Engineering Mathematics"
    with open(filename, "r", encoding="utf-8") as fd:
        return [
            [" ".join(parts[0:2])] + list(map(float, parts[2:6])) + parts[6:9]
            for line in fd
            if (parts := line.strip().split())
        ]


def sort_applicants_by_score(applicants: list, score_index: int) -> list:
    return sorted(applicants, key=lambda x: (-x[score_index], x[0]))


def sort_by_department(applicants: list, departments: dict, n: int) -> dict | None:
    """
    applicants parsing: [name,
                        physics_score, chemistry_score, math_score, computer_science_score,
                        priority_a, priority_b, priority_c]
    """

    # Track applicants who have already been admitted
    admitted = set()

    # Round indices for priority departments
    priorities = [5, 6, 7]  # first, second, third priority

    for priority in priorities:
        for dept in departments:
            # Set correct score to a department for sorting
            score_index = DEPT_SCORE_INDEX.get(dept)
            if score_index is None:
                print(f"Error: unknown score index for department {dept}")
                continue

            # Only consider applicants who are not admitted yet
            eligible = [
                applicant for applicant in applicants
                if applicant[priority] == dept and tuple(applicant) not in admitted
            ]
            # # Debug
            # print("Debug:")
            # for a in eligible:
            #     print(f"{a[0]} - {a[score_index]:.2f} - Round {priority - 4} for {dept}")

            selected = sort_applicants_by_score(eligible, score_index)[:n - len(departments[dept])]

            departments[dept].extend(selected)
            admitted.update(map(tuple, selected))

    # Re-sort each department's final list before returning
    for dept in departments:
        score_index = DEPT_SCORE_INDEX.get(dept)
        departments[dept].sort(key=lambda a: (-a[score_index], a[0]))

    return departments


def main():
    departments = {dept: [] for dept in ["Biotech", "Chemistry", "Engineering", "Mathematics", "Physics"]}

    # Process "applicant_list.txt" file,
    applicants = process_file(filename="applicant_list_5.txt")
    # # Debug
    # print("Debug - unsorted applicants:")
    # for name, exam1, exam2, exam3, exam4, priority_a, priority_b, priority_c in applicants:
    #     print(f"{name}, {exam1:.2f}, {exam2:.2f}, {exam3:.2f}, {exam4:.2f}, {priority_a}, {priority_b}, {priority_c}")

    # N integer representing the number of applicants allowed for department
    n = int(input())

    # Sort list of applicant by Departments
    departments = sort_by_department(applicants, departments, n)

    # Output result according to score
    # print_output(departments, to_file=True) # print output to file "admitted.txt"
    print_output(departments) # print output


if __name__ == '__main__':
    main()